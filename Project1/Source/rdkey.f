      SUBROUTINE RDKEY (KK, NMAX, LIN, LOUT, KSYM, PATM,
     1                  MFILE, IPRNT, UFAC, DTMAX, DTMIN,
     2                   NPTS, NTOT, NADP, X, SCAL, NREAC, NINTM,
     3                  NPROD, REAC, PROD, KR, KI, KP, XSTR,
     4                  XCEN, XEND, WMIX, FLRT, GRAD, CURV, SFLR,
     5                  NTEMP, XX, TT, TFIXT, ATIM, RTIM,
     6                  NJAC, ITJAC, NINIT, NUMDT, IRETIR, DT,
     7                  NUMDT2, DT2, WNDFAC, GFAC, SPOS, N1CALL, TBUR,
     8                  TAMB, IRADI,DVCF,RADCOEFF,P,
     9                  PAH,coeff_K, IREFN, RFUEL,HC,CP,RK,PHI,INFO,ZM,
     %                  XXZ,XXD,DM,ATOL,RTOL,NZMIX,NDMIX,ZST)
        USE var
C
C*****precision > double
        IMPLICIT DOUBLE PRECISION (A-H, O-Z), INTEGER (I-N)
C

c      INCLUDE 'LOCS.cmn'
c      INCLUDE 'OPTHIN.cmn'
      INCLUDE 'TEST.cmn'
c      INCLUDE 'VAR.cmn'
      INCLUDE 'LOGICAL.cmn'

C
      DIMENSION SCAL(*), REAC(*), PROD(*), KR(*),
     1          KI(*), KP(*), XX(*), TT(*), X(*), VALUE(5),INFO(20),
     2          ATOL(1),RTOL(1),ZM(*),XXZ(*),XXD(*),DM(*)
C
      LOGICAL LBURNR, LTIME, LTIME2, LMOLE, LENRGY, LTDIF,
     1        LRSTRT, LCNTUE, LASEN, LRSEN, LESEN, LMSEN, LPSEN, LMULTI, 
     2        LCSEN, LDSEN, NEC(8), NOPT(5), CNTNUD, LFIRST, IERR, KERR,
     3        LVCOR, LHSEN, LADAPT, ADIAMF, SOOTP, freeMolOnly,LUSTGV,
     4        LPREMIX, LCARTE, LHYDRO, LTEST, LSOOTINIT, LNUCL, LSURF,
     5        LOXID, LCOAG, LPOST,LREF,LGLOB
C
      CHARACTER KEYWRD*4, LINE*100, KSYM(*)*(*), PAH*12
      
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C   KK     - NUMBER OF CHEMICAL SPECIES.
C   NMAX   - TOTAL NUMBER OF GRID POINTS THAT CAN BE USED.  NMAX IS
C            USED FOR DIMENSIONING AND ALLOWING FOR DYNAMIC STORAGE
C            ALLOCATION, IT CAN ONLY BE CHANGED IN THE DRIVER CODE.
C   LIN    - UNIT FOR READING KEYWORD INPUT.
C   LOUT   - UNIT FOR PRINTED OUTPUT.
C   KSYM   - ARRAY OF CHARACTER*(*) CHEMKIN SPECIES NAMES.
C              DIMENSION KSYM LEAST KK.
C   PATM   - PRESSURE OF ONE ATMOSPHERE.
C              CGS UNITS - DYNES/CM**2
C
C OUTPUT-
C   LBURNR - IF LBURNR=.TRUE. IT IS A BURNER STABILIZED FLAME PROBLEM.
C            IF LBURNR=.FALSE. THIS IS A FREELY PROPAGATING ADIABATIC
C            FLAME.
C   LTIME  - IF LTIME=.TRUE. THEN TIME STEPPING IS USED.
C            IF LTIME=.FALSE. THEN ONLY NEWTONS METHOD IS USED.
C   LTIME2 - IF LTIME2=.TRUE. THEN TIME STEPPING USED ON EACH NEW MESH.
C            IF LTIME2=.FALSE. THEN ONLY NEWTONS METHOD IS USED.
C   LMOLE  - FLAG INDICATING WHETHER INPUT AND OUTPUT IS IN MOLE OR
C            MASS FRACTION.
C              LMOLE=.TRUE. THEN MOLE FRACTION.
C              LMOLE=.FALSE. THEN MASS FRACTION.
C   LUSTGV - ON A RESTART, IF LUSTGV=.TRUE. THEN THE GIVEN
C            TEMPERATURE PROFILE WILL BE USED RATHER THAN THE ONE
C            ON THE RESTART FILE.
C   LENRGY - IF LENRGY=.TRUE. THEN THE ENERGY EQUATION IS SOLVED.
C            IF LENRGY=.FALSE. THEN A SPECIFIED TEMPERATURE PROFILE IS
C            USED.  THE SPECIFIED PROFILE IS IN (XX(I),TT(I)) PAIRS.
C   LTDIF  - IF LTDIF=.TRUE. THEN INCLUDE THERMAL DIFFUSION.
C            IF LTDIF=.FLASE. THEN NEGLECT THERMAL DIFFUSION.
C   LMULTI - IF LMULTI=.TRUE. THEN MULTICOMPONENT FORMULAS USED
C            IF LMULTI=.FALSE. THEN MIXTURE-AVERAGED FORMULAS USED
C   LVCOR  - IF LVCOR=.TRUE. THEN USE CORRECTION VELOCITY FORMULISM
C            IF LVCOR=.FALSE. THEN USE 'TRACE' APPROXIMATION, LUMPING
C            ALL TRANSPORT ERRORS INTO THE 'LAST' SPECIES.
C   LUMESH - IF LUMESH=.TRUE. THEN START ON A UNIFORM MESH.
C            IF LUMESH=.FALSE. THEN START ON A SPECIFIED NONUNIFORM
C            MESH AS GIVEN IN X, AS SPECIFIED WITH THE GRID KEYWORD.
C   LRSTRT - IF LRSTRT=.TRUE. THEN START FROM A PREVIOUS PROFILE.
C            IF LRSTRT=.FALSE. THEN START FRESH.
C   LCNTUE - IF LCNTUE=.TRUE. THEN A CONTINUATION PROBLEM WILL FOLLOW.
C            IF LCNTUE=.FLASE. THIS IS THE ONLY PROBLEM FOR THE RUN.
C   IPRNT  - FLAG TO SPECIFY THE AMOUNT OF PRINTING.
C              IPRNT = 0, PRINT ONLY THE FINAL SOLUTION.
C              IPRNT = 1, PRINT THE NORMS AFTER EACH ITERATION, AND
C                         THE CONVERGED SOLUTIONS ON EACH MESH.
C              IPRNT = 2, PRINT THE FULL SOLUTION AFTER EACH ITERATION.
C   LASEN  - IF LASEN=.TRUE. COMPUTE SENSITIVITIES FOR ALL REACTIONS.
C            IF LASEN=.FALSE. DO NOT COMPUTE REACTION SENSITIVITIES.
C   LHSEN  - IF LHSEN=.TRUE. COMPUTE H SENSITIVITY FOR ALL SPECIES.
C            IF LASEN=.FALSE. DO NOT COMPUTE H SENSITIVITY.
C   LRSEN  - IF LRSEN=.TRUE. COMPUTE SENSITIVITIES FOR A SET OF
C            SPECIFIED REACTIONS.
C            IF LRSEN=.FALSE. DO NOT COMPUTE REACTION SENSITIVITIES.
C   LESEN  - IF LESEN=.TRUE. COMPUTE SENSITIVITIES FOR THE INLET
C            MASS FLUX FRACTIONS.
C            IF LESEN=.FALSE. DO NOT COMPUTE INLET SENSITIVITIES.
C   LMSEN  - IF LMSEN=.TRUE. COMPUTE SENSITIVITIES FOR THE MASS
C            FLOW RATE.
C            IF LMSEN=.FALSE. DO NOT COMPUTE MASS FLOW SENSITIVITIES.
C   LPSEN  - IF LPSEN=.TRUE. COMPUTE SENSITIVITIES FOR THE PRESSURE.
C            IF LPSEN=.FALSE. DO NOT COMPUTE PRESSURE SENSITIVITIES.
C   LCSEN  - IF LCSEN=.TRUE. COMPUTE SENSITIVITIES FOR THE
C            THERMAL CONDUCTIVITIES.
C            IF LCSEN=.FALSE. DO NOT COMPUTE CONDUCTIVITY
C            SENSITIVITIES.
C   LPREMIX- IF LPREMIX=.TRUE. SET OUTER BOUNDARY CONDITIONS FOR PREMIXED FLAME.
C            IF LPREMIX	=.FALSE. SET OUTER BOUNDARY CONDITIONS FOR DIFFUSION FLAME.
C   LCARTE - IF LCARTE=.TRUE. SET AREA FUNCTION CONSTANT (CARTESIAN COORDINATES).
C            IF LCARTE=.FALSE. SET AREA FUNCTION TO SPHERICAL COORDINATES.
C   LHYDRO - IF LHYDRO=.TRUE. SET MIXTURE FRACTION AND POSTPROCESS TO HYDROGEN EXPRESSION.
C          - IF LHYDRO=.FALSE. SET MIXTURE FRACTION AND POSTPROCESS TO ETHYLENE EXPRESSION.
C   LTEST  - IF LTEST=.TRUE. SET HOMOGENOUS, MONODISPERSE DISTRIBUTION MOMENTS FOR 
C            mp (PARTICLE MASS) = 32 mc (CARBON ATOM MASS) ACTS ON THE RESIDUALS OF THE SOOT MOMENTS.
C   LPOST  - IF LPOST=.TRUE., THEN POST PROCESSING IS ACTIVATED.
C   P      - PRESSURE.
C              CGS UNITS - DYNES/CM**2
C   NPTS   - NUMBER OF MESH POINTS IN THE STARTING MESH, X(*).
C   NTOT   - MAXIMUM NUMBER OF GRID POINTS ALLOWED FOR THIS PROBLEM.
C   NADP   - MAXIMUM NUMBER OF MESH POINTS THAT CAN BE ADAPTIVELY
C            ADDED DURING ANY ADAPTION STEP.
C   X      - THE ARRAY OF MESH POINT LOCATIONS.
C              DIMENSION X(*) AT LEAST NMAX
C   SCAL   - ARRAY OF SCALE FACTORS USED FOR COMPUTING NORMS OF
C            THE SOLUTION ITERATES.
C              DIMENSION SCAL(*) AT LEAST NATJ.
C   NREAC  - NUMBER OF REACTANT SPECIES SPECIFIED.
C   NINTM  - NUMBER OF INTERMEDIATE SPECIES SPECIFIED.
C   NPROD  - NUMBER OF PRODUCT SPECIES SPECIFIED.
C   REAC   - ARRAY OF REACTANT SPECIES INPUT MOLE (MASS) FRACTIONS.
C            DIMENSION REAC(*) AT LEAST KK.
C   XINTM  - ARRAY OF INTERMEDIATE SPECIES INPUT MOLE (MASS) FRACTIONS.
C            DIMENSION XINTM(*) AT LEAST KK.
C   PROD   - ARRAY OF PRODUCT SPECIES INPUT MOLE (MASS) FRACTIONS.
C            DIMENSION PROD(*) AT LEAST KK.
C   KR     - ARRAY OF CHEMKIN SPECIES INDICIES FOR THE REACTANTS AS
C            SPECIFIED IN THE REAC ARRAY.
C            DIMENSION KP(*) AT LEAST KK.
C   KI     - ARRAY OF CHEMKIN SPECIES INDICIES FOR THE INTERMEDIATES AS
C            SPECIFIED IN THE XINTM ARRAY.
C            DIMENSION KI(*) AT LEAST KK.
C   KP     - ARRAY OF CHEMKIN SPECIES INDICIES FOR THE PRODUCTS AS
C            SPECIFIED IN THE PROD ARRAY.
C            DIMENSION KP(*) AT LEAST KK.
C   XSTR   - BEGINNING X POSITION FOR THE MESH.
C              CGS UNITS - CM
C   XCEN   - X POSITION WHERE THE INITIAL STARTING ESTIMATES ARE
C            CENTERED.
C              CGS UNITS - CM
C   XEND   - ENDING POSITION FOR THE MESH.
C              CGS UNITS - CM
C   WMIX   - WIDTH OF THE MIXING REGION OVER WHICH THE STARTING
C            ESTIMATES ARE FIT.
C              CGS UNITS - CM
C   FLRT   - THE MASS FLOW RATE IN A BURNER STABILIZED PROBLEM.
C              CGS UNITS - GM/(CM**2-SEC)
C   GRAD   - GRADIENT CRITERIA FOR ADAPTIVE MESHING.
C   CURV   - CURVATURE CIRTERIA FOR ADAPTIVE MESHING.
C   NTEMP  - NUMBER OF XX,TT PAIRS FOR THE SPECIFIED TEMPERATURE
C            PROFILE.  SEE XX(*) AND TT(*)
C   XX     - ARRAY OF X LOCATIONS FOR INITIAL TEMPERATURE PROFILES.
C              DIMENSION XX(*) AT LEAST NMAX.
C              CGS UNITS - CM
C   TT     - ARRAY OF INITIAL TEMPERATURES AT XX.
C              DIMENSION TT(*) AT LEAST NMAX.
C              CGS UNITS - K
C   TFIXT  - TEMPERATURE THAT IS TO BE HELD FIXED FOR FREE FLAMES.
C              CGS UNITS - K
C   ATOL   - ABSOLUTE CONVERGENCE CRITERIA FOR THE NEWTON ITERATION.
C   RTOL   - RELATIVE CONVERGENCE CRITERIA FOR THE NEWTON ITERATION.
C   ATIM   - ABSOLUTE CONVERGENCE CRITERIA FOR THE NEWTON ITERATION
C            AS USED FOR THE TIME STEPS.
C   RTIM   - RELATIVE CONVERGENCE CRITERIA FOR THE NEWTON ITERATION
C            AS USED FOR THE TIME STEPS.
C   NUMDT  - NUMBER OF TIME STEPS TO TAKE WHEN DOING A TIME START.
C   NUMDT2 - NUMBER OF TIME STEPS TO TAKE WHEN TIME STEPPING WITH THE
C            ENERGY EQUATION INCLUDED.
C   DT     - SIZE OF THE TIME STEPS.
C              CGS UNITS - SEC
C   DT2    - SIZE OF THE TIME STEPS AFTER THE ENERGY EQUATION IS
C            INCLUDED.
C              CGS UNITS - SEC
C   WNDFAC - IF WINDFAC=1, THEN WINDWARD DIFFERENCING ON CONVECTION.
C            IF WINDFAC=0, THEN CENTRAL DIFFERENCING ON CONVECTION.
C     
C   RADCOEFF-RADIATION AMPLIFICATION FACTOR. BY DEFAULT = 1.0
C   ADIAMF - ADIABATIC MASS FRACTION OUTER BOUNDARY
C   SOOTP   - IF SOOT = TRUE USE THE SOOT MODEL, BY DEFAULT FALSE
C   LSOOTINIT - ACTIVATED BY KEYWORD INIT. WHEN TRUE, CREATE A CONSTANT,
C            MONODISPERSE SOOT PROFILE OF VALUE FVINIT ACCROSS THE DOMAIN AS INITIAL GUESS
C   LNUCL  - ACTIVATED BY KEYWORD NUCL. WHEN TRUE, CONSIDER SOOT NUCLEATION ONLY. SET SOOTP = TRUE.
C   LCOAG  - ACTIVATED BY KEYWORD COAG. WHEN TRUE, CONSIDER SOOT COAGULATION ONLY. SET SOOTP = TRUE. 
C   LSURF  - ACTIVATED BY KEYWORD SURF. WHEN TRUE, CONSIDER SOOT SURFACE GROWTH ONLY. SET SOOTP = TRUE.
C   LOXID  - ACTIVATED BY KEYWORD OXID. WHEN TRUE, CONSIDER SOOT OXIDATION ONLY. SET SOOTP = TRUE.
C   freeMolOnly - IF TRUE, THEN FORMULATION FOR FREE MOLECULAR REGIME 
C                 IS USED IN THE SOOT FORMATION CODE. 
C                 OTHERWISE USE TRANSITION
C   PAH    - NAME OF THE SPECIES CONSIDERED AS SOOT INCEPTOR
C            IN THE SOOT MODEL - KEYWORD INCP
!   ADDED BY HANJULEE 1/09/19
!   IREFN - REFINE INCREMENT FOR TRANSIENT CASE/ REFINES 
!            THE GRID EVERY INCREMENTED SOLUTION FOUND IN TRANSIENT CASE
!   LREF - TURNS ON REFINEMENT FOR TRANSIENT CASE
C   LGLOB  - Turns on analytical droplet model initialization 
C   RFUEL  - Mass/MOle fraction of fuel
C   NHYDRO - Number of Hydrogen in fuel species
C   NCARBON- Number of Carbon in fuel species
C   LHOM - Activate homogeneous reactor
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C
      DATA NEC/8*.FALSE./, NOPT/5*.FALSE./, CNTNUD/.FALSE./
C
C            INITIALIZE VARIABLES
C
      KERR = .FALSE.
      IF (LCNTUE) THEN
C
         LCNTUE = .FALSE.
         CNTNUD = .TRUE.
         LFIRST = .TRUE.
         NP = 0
C
      ELSE
C
!         DO 10 K = 1, KK
!            SCAL(NYS+K) = 1.
!            REAC(K) = 0.
!            PROD(K)  = 0.
!10       CONTINUE
C
         TBUR = 300.
         TAMB = 300.         
!         SCAL(NT) = 1000.
!         SCAL(NM) = 1.0
         NREAC = 0
         NINTM = 0
         NPROD = 0
         NPTS  = 6
         NTOT  = NMAX
         NADP  = NMAX
         GRAD  = 0.1
         CURV  = 0.5
         SFLR = -1.E-3
         ATOL(1)   = 1.0E-9
         RTOL(1)   = 1.0E-4
         ATIM   = 1.0E-9
         RTIM   = 1.0E-4
         NINIT = 0
         NJAC = 20
         NUMDT = 100
         IRETIR=50
         DT    = 1.0E-6
         NUMDT2= 100
         DT2   = 1.0E-6
         UFAC = 2.0
         DFAC = 2.2
         DTMIN = 1.E-10
         DTMAX = 1.0E-04
         TIMMX = 1.e10
         ITJAC = 20
         N1CALL=1
         GFAC = 1.0
         SPOS = -1.0
         MFILE = 0
         NTEMP  = 0
         NZMIX = 0
         NDMIX = 0 
         NP = 0
         WNDFAC = 1.0
         XSTR  = 0.0
         IPRNT = 1
         IRADI = 0
         IFXTM = 0
         TFXTM = 1700.0
         RADCOEFF = 1.0
         FVINIT = 1.0D-10
         FVPROF = 1.0D-10

         coeff_K = 0.0
         IREFN = 0
         
         LFIRST = .TRUE.
         ADIAMF = .FALSE.
         LUMESH = .TRUE.
         LUSTGV = .FALSE.
         LCNTUE = .FALSE.
         LRSTRT = .FALSE.
         LTDIF  = .FALSE.
         LMULTI = .FALSE.
         LVCOR  = .TRUE.
         LTIME  = .FALSE.
         LTIME2 = .FALSE.
         LENRGY = .FALSE.
         LASEN = .FALSE.
         LHSEN = .FALSE.
         LESEN = .FALSE.
         LRSEN = .FALSE.
         LMSEN = .FALSE.
         LPSEN = .FALSE.
         LCSEN = .FALSE.
         LDSEN = .FALSE.
         LADAPT= .TRUE.
	  SOOTP  = .FALSE.
         freeMolOnly = .FALSE.
         LPREMIX = .FALSE.
         LHYDRO = .FALSE.
         LCARTE= .FALSE.
	  LTEST =.FALSE.
	  LSOOTINIT=.FALSE.
	  LNUCL = .FALSE.
	  LSURF = .FALSE.
	  LOXID = .FALSE.
	  LCOAG = .FALSE.
	  LPOST = .FALSE.
      LREF = .FALSE.
      LGLOB = .FALSE.
      LHOM = .FALSE.
      LZMIX= .FALSE.
      do I=1,20
      INFO(I)=0
      end do
       ENDIF
C
C--------------------------------------------------------------
C
C         READ NEXT INPUT LINE
C         KEYWRD gets read line by line and is initiated accordingly
C         by reading 4 letter keywords
      WRITE (LOUT,'(/A/)') '           KEYWORD INPUT '
C
90    CONTINUE
      KEYWRD = ' '
      LINE = ' '
      IERR = .FALSE.
      READ  (LIN,  7000) KEYWRD, LINE
      WRITE (LOUT, 8000) KEYWRD, LINE
      CALL UPCASE (KEYWRD)
C
C               IS THIS A KEYWORD COMMENT?
C
      IF (KEYWRD(1:1) .EQ. '.' .OR. KEYWRD(1:1) .EQ. '/') GO TO 90
      IND = INDEX(LINE,'(')
      IF (IND .GT. 0) LINE(IND:) = ' '
C
C--------------PROBLEM TYPE KEYWORDS--------------------
C
C           BURNER-STABILIZED FLAME PROBLEM
C
      IF (KEYWRD .EQ. 'BURN') THEN
         LBURNR    = .TRUE.
         NEC(8)   = .TRUE.
cC
cC       ADIABATIC, FREELY PROPAGATING FLAME PROBLEM
cC
c      ELSEIF (KEYWRD .EQ. 'FREE') THEN
c         LBURNR = .FALSE.
c         LENRGY = .TRUE.
c         NEC(8)   = .TRUE.
cC
cC         MOLE FRACTION INPUT/OUTPUT
cC
      ELSEIF (KEYWRD .EQ. 'MOLE') THEN
         NEC(1)      = .TRUE.
         LMOLE       = .TRUE.
C
C         MASS FRACTION INPUT/OUTPUT
C
      ELSEIF (KEYWRD .EQ. 'MASS') THEN
         NEC(1)      = .TRUE.
         LMOLE       = .FALSE.
cC
cC         ENERGY EQUATION IS NOT INCLUDED
cC
c      ELSEIF (KEYWRD .EQ. 'TGIV') THEN
c         NEC(2) = .TRUE.
c         LENRGY   = .FALSE.
cC
c      ELSEIF (KEYWRD .EQ. 'FXTM') THEN
cC
cC        FIXED TEMPERATURE AT GIVEN POSITION
cC
c        CALL CKXNUM (LINE, 2, LOUT, NVAL, VALUE, IERR)
c        KERR = KERR.OR.IERR
c        IFXTM = INT(VALUE(1))
c        TFXTM = VALUE(2)
cC
cC         ENERGY EQUATION IS INCLUDED
cC
c      ELSEIF (KEYWRD .EQ. 'ENRG') THEN
c         NEC(2)      = .TRUE.
c         LENRGY = .TRUE.
cC
cC              TEMPERATURE ON THE BURNER SURFACE
cC
c      ELSEIF (KEYWRD .EQ. 'TBUR') THEN
c         CALL CKXNUM (LINE, 1, LOUT, NVAL, TBUR, IERR)
c         KERR = KERR.OR.IERR
cC
cC              TEMPERATURE ON THE AMBIENT
cC
c      ELSEIF (KEYWRD .EQ. 'TAMB') THEN
c         CALL CKXNUM (LINE, 1, LOUT, NVAL, TAMB, IERR)
c         KERR = KERR.OR.IERR

cC           ADIABATIC OUTER BOUNDARY MASS FRACTION

c      ELSEIF (KEYWRD .EQ. 'ADIM') THEN
c        ADIAMF = .TRUE.

cC	    SOOT MODEL IS ACTIVATED

c      ELSEIF (KEYWRD .EQ. 'SOOT') THEN
c        SOOTP = .TRUE.

cC	    FREE MOLECULAR REGIME ONLY SELECTED

c      ELSEIF (KEYWRD .EQ. 'FMOL') THEN
c        freeMolOnly = .TRUE.

cC	  PREMIXED FLAME CONFIGURATION
c      ELSEIF (KEYWRD .EQ. 'PREM') THEN
c	LPREMIX = .TRUE.

cC         CARTESIAN COORDINATES
c      ELSEIF (KEYWRD .EQ. 'CART') THEN
c	LCARTE= .TRUE.

cC	  HYDROGEN REACTION
c      ELSEIF (KEYWRD .EQ. 'HYDR') THEN
c	LHYDRO= .TRUE.

cC        SOOT NUCLEATION ONLY
c      ELSEIF (KEYWRD .EQ. 'NUCL') THEN
c	LNUCL= .TRUE.
c	SOOTP= .TRUE.

cC        SOOT COAGULATION ONLY
c      ELSEIF (KEYWRD .EQ. 'COAG') THEN
c	LCOAG= .TRUE.
c	SOOTP= .TRUE.

cC        SOOT SURFACE GROWTH ONLY
c      ELSEIF (KEYWRD .EQ. 'SURF') THEN
c	LSURF= .TRUE.
c	SOOTP= .TRUE.

cC        SOOT OXIDATION ONLY
c      ELSEIF (KEYWRD .EQ. 'OXID') THEN
c	LOXID= .TRUE.
c	SOOTP= .TRUE.

C
C--------------METHOD OPTIONS KEYWORDS--------------------
C
C
C     Controls closed homogeneous reactor's solver method
C     INFO(12) which is a control matrix for ddaspk is set to be 0 if direct method 
C     ELSE INFO(12) is 1 if krylov method         
      ELSEIF (KEYWRD .EQ. 'DIRC')  THEN
         CALL CKXNUM (LINE, 1, LOUT, NVAL, VALUE, IERR)
         IF (INT(VALUE(1)) .EQ. 0) THEN
         INFO(12) = 0
         ELSE
         INFO(12) = 1
         END IF
C       ABSOLUTE NEWTON ITERATION CONVERGENCE CRITERIA
C
      ELSEIF (KEYWRD .EQ. 'ATOL') THEN
         CALL CKXNUM (LINE, 1, LOUT, NVAL, VALUE, IERR)
         ATOL(1)=VALUE(1)
         KERR = KERR.OR.IERR
cC
c      ELSEIF (KEYWRD .EQ. 'NJAC') THEN
cC
cC       RETIREMENT AGE OF JACOBIAN DURING STEADY-STATE NEWTON
cC
c         CALL CKXNUM (LINE, 1, LOUT, NVAL, VALUE, IERR)
c         NJAC = INT (VALUE(1))
c         KERR = KERR.OR.IERR
cC
cC       RELATIVE NEWTON ITERATION CONVERGENCE CRITERIA
cC
      ELSEIF (KEYWRD .EQ. 'RTOL') THEN
         CALL CKXNUM (LINE, 1, LOUT, NVAL, VALUE, IERR)
         RTOL(1)=VALUE(1)
         KERR = KERR.OR.IERR
C
C       ABSOLUTE NEWTON CONVERGENCE CRITERIA FOR TIMESTEPS
C
c      ELSEIF (KEYWRD .EQ. 'ATIM') THEN
c         CALL CKXNUM (LINE, 1, LOUT, NVAL, ATIM, IERR)
c         KERR = KERR.OR.IERR
cC
cC       RELATIVE NEWTON CONVERGENCE CRITERIA FOR TIMESTEPS
cC
c      ELSEIF (KEYWRD .EQ. 'RTIM') THEN
c         CALL CKXNUM (LINE, 1, LOUT, NVAL, RTIM, IERR)
c         KERR = KERR.OR.IERR
C
C       TIME STEP STARTING PROCEDURE
C
      ELSEIF (KEYWRD .EQ. 'TIME') THEN
         LTIME    = .TRUE.
         CALL CKXNUM (LINE, 2, LOUT, NVAL, VALUE, IERR)
         KERR = KERR.OR.IERR
         NUMDT = INT(VALUE(1))
         DT = VALUE(2)
cC
c      ELSEIF (KEYWRD .EQ. 'ISTP') THEN
cC
cC        NUMBER OF INITIAL TIME STEPS BEFORE NEWTON
cC
c         CALL CKXNUM (LINE, 1, LOUT, NVAL, VALUE, IERR)
c         NINIT = INT (VALUE(1))
c         KERR = KERR.OR.IERR
cC
c      ELSEIF (KEYWRD .EQ. 'IRET') THEN
cC
cC        RETIREMENT AGE OF OLD TIME STEP (DEFAULT = 50)
cC
c         CALL CKXNUM (LINE, 1, LOUT, NVAL, VALUE, IERR)
c         IRETIR = INT (VALUE(1))
c         KERR = KERR.OR.IERR
cC
cC        TIME STEPPING, AFTER ADDING THE ENERGY EQUATION
cC
c      ELSEIF (KEYWRD .EQ. 'TIM2') THEN
c         LTIME2    = .TRUE.
c         CALL CKXNUM (LINE, 2, LOUT, NVAL, VALUE, IERR)
c         KERR = KERR.OR.IERR
c         NUMDT2 = INT(VALUE(1))
c         DT2 = VALUE(2)
cC
cC       TIMESTEP INCREASE WHEN TIMESTEP DOES NOT CHANGE SOLUTION
cC
c      ELSEIF (KEYWRD .EQ. 'UFAC') THEN
c         CALL CKXNUM (LINE, 1, LOUT, NVAL, UFAC, IERR)
c         KERR = KERR.OR.IERR
cC
cC       TIMESTEP DECREASE WHEN NEWTON FAILS CONVERGENCE ON TIMESTEP
cC
c      ELSEIF (KEYWRD .EQ. 'DFAC') THEN
c         CALL CKXNUM (LINE, 1, LOUT, NVAL, DFAC, IERR)
c         KERR = KERR.OR.IERR
cC
cC       MINIMUM TIMESTEP
cC
c      ELSEIF (KEYWRD .EQ. 'DTMN') THEN
c         CALL CKXNUM (LINE, 1, LOUT, NVAL, DTMIN, IERR)
c         KERR = KERR.OR.IERR
cC
c      ELSEIF (KEYWRD .EQ. 'DTMX') THEN
cC
cC       MAXIMUM TIMESTEP
cC
c         CALL CKXNUM (LINE, 1, LOUT, NVAL, DTMAX, IERR)
c         KERR = KERR.OR.IERR
cC
      ELSEIF (KEYWRD .EQ. 'MXTM') THEN
C
C       MAXIMUM TIME
C
         CALL CKXNUM (LINE, 1, LOUT, NVAL, VALUE, IERR)
         TIMMX=VALUE(1)
         KERR = KERR.OR.IERR
cC

c      ELSEIF (KEYWRD .EQ. 'TJAC') THEN
cC
cC       RETIREMENT AGE OF JACOBIAN DURING TIME STEPPING
cC
c         CALL CKXNUM (LINE, 1, LOUT, NVAL, VALUE, IERR)
c         ITJAC = INT (VALUE(1))
c         KERR = KERR.OR.IERR


c       ELSEIF (KEYWRD .EQ. 'TEST') THEN 
cC
cC       DEFINES FLAT SOOT PROFILE TEST WITH GIVEN FV (USER DEFINED)
cC
c	 LTEST = .TRUE.
c         CALL CKXNUM (LINE, 1, LOUT, NVAL, FVPROF, IERR)
c         KERR = KERR.OR.IERR

c       ELSEIF (KEYWRD .EQ. 'INIT') THEN 
cC
cC       INITIALIZE SOOT PROFILE FOR SOOT CALCULATION
cC
c	 LSOOTINIT = .TRUE.
c         CALL CKXNUM (LINE, 1, LOUT, NVAL, FVINIT, IERR)
c         KERR = KERR.OR.IERR
c         SOOTP = .TRUE.


cC
cC--------------GRID PARAMETER KEYWORDS--------------------
cC
cC          SWITCH ON AND OFF THE ADAPTIVE OPTION
cC
cC
c      ELSEIF (KEYWRD .EQ. 'ADPT') THEN
c         CALL CKXNUM (LINE, 1, LOUT, NVAL, VALUE, IERR)
c         IF(INT(VALUE(1)).EQ.1) THEN             
c              LADAPT  = .TRUE.
c         ELSE 
c              LADAPT = .FALSE.
c         END IF
cC
cC         NUMBER OF INITIAL MESH POINTS
cC                          (THIS IS OVERWRITTEN 'GRID' INPUT)
cC
      elseif (keywrd .eq. 'NPTS') then
         call ckxnum (line, 1, lout, nval, value, ierr)
         kerr = kerr.or.ierr
         npts   = int(value(1))
cC
cC       INITIAL MESH
cC
c      ELSEIF (KEYWRD .EQ. 'GRID') THEN
c         LUMESH    = .FALSE.
c         CALL CKXNUM (LINE, 1, LOUT, NVAL, VALUE, IERR)
c         IF (IERR .OR. NP+1.GT.NMAX) THEN
c            KERR = .TRUE.
c         ELSE
c            NP = NP+1
c            X(NP) = VALUE(1)
c         ENDIF
cC
cC         GRADIENT MESH ADAPTION PARAMETER
cC
c      ELSEIF (KEYWRD .EQ. 'GRAD') THEN
c         CALL CKXNUM (LINE, 1, LOUT, NVAL, GRAD, IERR)
c         KERR = KERR.OR.IERR
cC
cC         CURVATURE MESH ADAPTION PARAMETER
cC
c      ELSEIF (KEYWRD .EQ. 'CURV') THEN
c         CALL CKXNUM (LINE, 1, LOUT, NVAL, CURV, IERR)
c         KERR = KERR.OR.IERR
cC
cC            POINT FOR LEFT BOUNDARY CONDITION
cC
      ELSEIF (KEYWRD .EQ. 'XSTR') THEN
         CALL CKXNUM (LINE, 1, LOUT, NVAL, VALUE, IERR)
         XSTR= VALUE(1) 
         KERR = KERR.OR.IERR
cC
cC             CENTER OF MIXING REGION
cC
c      ELSEIF (KEYWRD .EQ. 'XCEN') THEN
c         NOPT(2) = .TRUE.
c         CALL CKXNUM (LINE, 1, LOUT, NVAL, XCEN, IERR)
c         KERR = KERR.OR.IERR
cC
cC            DISTANCE AT WHICH END BOUNDARY CONDITION IS APPLIED
cC
      ELSEIF (KEYWRD .EQ. 'XEND') THEN
         NEC(5)  = .TRUE.
         CALL CKXNUM (LINE, 1, LOUT, NVAL, VALUE, IERR)
          XEND= VALUE(1)
         KERR = KERR.OR.IERR
cC
cC              WIDTH OF MIXING ZONE
cC
c      ELSEIF (KEYWRD .EQ. 'WMIX') THEN
c         NOPT(1) = .TRUE.
c         CALL CKXNUM (LINE, 1, LOUT, NVAL, WMIX, IERR)
c         KERR = KERR.OR.IERR
cC
cC              2nd order WINDWARD Differencing
cC
c      ELSEIF( KEYWRD .EQ. 'SOWD') THEN
c         WNDFAC = 2.0
cC
cC              1st order WINDWARD DIFFERENCING
cC
c      ELSEIF (KEYWRD .EQ. 'WDIF') THEN
c         WNDFAC = 1.0
cC
cC              CENTRAL DIFFERENCING
cC
c      ELSEIF (KEYWRD .EQ. 'CDIF') THEN
c         WNDFAC = 0.0
cC
cC        FLOOR VALUE FOR THE SPECIES BOUNDS
cC
c      ELSEIF (KEYWRD .EQ. 'SFLR') THEN
c         CALL CKXNUM (LINE, 1, LOUT, NVAL, SFLR, IERR)
c         KERR = KERR.OR.IERR
c!
c!        REFINE for Transient case          
c!
c      ELSEIF (KEYWRD .EQ. 'REFN') THEN
c         CALL CKXNUM (LINE, 1, LOUT, NVAL, VALUE, IERR)
c         KERR = KERR.OR.IERR
c         IREFN   = INT(VALUE(1))   
c!
c!        TURNS ON TRANSIENT CASE REFINEMENT            
c!      
c      ELSEIF (KEYWRD .EQ. 'COMP') THEN
c         LREF = .TRUE.
cC----------------------------------------------------------
cC Volumetric heat losses

c      ELSEIF (KEYWRD .EQ. 'VHLS') THEN
c         CALL CKXNUM (LINE, 1, LOUT, NVAL, coeff_K, IERR)
c         KERR = KERR.OR.IERR
cC
cC--------------FLAME DEFINITION KEYWORDS--------------------
cC
cC         PRESSURE
cC
c      ELSEIF (KEYWRD .EQ. 'RADI') THEN
cC
cC        TURN ON THE RADIATION TERM
cC
c         CALL CKXNUM (LINE, 1, LOUT, NVAL, VALUE, IERR)
c         KERR = KERR.OR.IERR
c         IRADI  = INT(VALUE(1))
c         SIGMA = 5.6705E-5
         
cC        RADIATION AMPLIFICATION FACTOR     
        
c      ELSEIF (KEYWRD .EQ. 'RADC') THEN
c         CALL CKXNUM (LINE, 1, LOUT, NVAL, RADCOEFF, IERR)
c         KERR = KERR.OR.IERR
cC
c      ELSEIF (KEYWRD .EQ. 'SLEP') THEN
cC
cC        SURFACE EMISSIVITY CONSTANT
cC
c         CALL CKXNUM (LINE, 1, LOUT, NVAL, SLEPS, IERR)
c         KERR = KERR.OR.IERR
C
      ELSEIF (KEYWRD .EQ. 'PRES') THEN
         NEC(3)  = .TRUE.
         CALL CKXNUM (LINE, 1, LOUT, NVAL, VALUE, IERR)
         P=VALUE(1)
         KERR = KERR.OR.IERR
         P = P*PATM

cC
c      ELSEIF (KEYWRD .EQ. 'FLRT') THEN
cC
cC        MASS FLOW RATE (gm/sec)
cC
c         NEC(4)  = .TRUE.
c         CALL CKXNUM (LINE, 1, LOUT, NVAL, FLRT, IERR)
c         KERR = KERR.OR.IERR
C
C         REACTANT
C
      ELSEIF (KEYWRD .EQ. 'REAC') THEN
C
         IF (LFIRST) THEN
            LFIRST = .FALSE.
            NREAC = 0
            DO 1100 K = 1, KK
               REAC(K) = 0.
1100        CONTINUE
         ENDIF
         CALL CKSNUM (LINE, 1, LOUT, KSYM, KK, KSPEC, NVAL,
     1                VALUE, IERR)
         IF (IERR .OR. NREAC+1.GT.KK) THEN
            WRITE (LOUT,'(A)')
     1      ' ERROR READING DATA FOR KEYWORD '//KEYWRD
            KERR = .TRUE.
         ELSE
            NREAC       = NREAC+1
            KR(NREAC)   = KSPEC
            REAC(KSPEC) = VALUE(1)
         ENDIF
cC
cC         INTERMEDIATE
cC
c      ELSEIF (KEYWRD .EQ. 'INTM') THEN
c         CALL CKSNUM (LINE, 1, LOUT, KSYM, KK, KSPEC, NVAL,
c     1                VALUE, IERR)
c         IF (IERR .OR. NINTM+1.GT.KK) THEN
c            WRITE (LOUT,'(A)')
c     1      ' ERROR READING DATA FOR KEYWORD '//KEYWRD
c            KERR = .TRUE.
c         ELSE
c            NINTM       = NINTM + 1
c            KI(NINTM)   = KSPEC
c            XINTM(KSPEC) = VALUE(1)
c         ENDIF
cC
cC         PRODUCT
cC
c      ELSEIF (KEYWRD .EQ. 'PROD') THEN
c         CALL CKSNUM (LINE, 1, LOUT, KSYM, KK, KSPEC, NVAL,
c     1                VALUE, IERR)
c         IF (IERR .OR. NPROD+1.GT.KK) THEN
c            WRITE (LOUT,'(A)')
c     1      ' ERROR READING DATA FOR KEYWORD '//KEYWRD
c            KERR = .TRUE.
c         ELSE
c            NPROD = NPROD + 1
c            KP(NPROD) = KSPEC
c            PROD(KSPEC) = VALUE(1)
c         ENDIF
cC
cC	  SOOT INCEPTOR SPECIES
cC
c      ELSEIF (KEYWRD .EQ. 'INCP') THEN
cC	 CALL CKSNUM (LINE, 1, LOUT, KSYM, KK, i_PAH, NVAL,
cC     1                VALUE, IERR)
	 
c          ILEN = MIN (IPPLEN(LINE), ILASCH(LINE))
c       	 IF (ILEN .LE. 0) RETURN
c          I1 = IFIRCH(LINE(:ILEN))
c          I3 = INDEX(LINE(I1:ILEN),' ')
c          IF (I3 .EQ. 0) I3 = ILEN - I1 + 1
c          I2 = I1 + I3
c          PAH = ' '
c          PAH = LINE(I1:I2-1)
C	 
C         READ SPECIFIED TEMPERATURE PROFILE (X,T) PAIRS
C
      ELSEIF (KEYWRD .EQ. 'TEMP') THEN
         CALL CKXNUM (LINE, 2, LOUT, NVAL, VALUE, IERR)
         KERR = KERR.OR.IERR
         IF (NTEMP+1 .GT. NMAX) THEN
               WRITE (LOUT, *)
     1         ' ERROR... THE PROBLEM IS ONLY DIMENSIONED FOR ', NMAX,
     2         ' (X,T) PAIRS'
               KERR = .TRUE.
         ELSE
            NTEMP = NTEMP + 1
            XX(NTEMP) = VALUE(1)
            TT(NTEMP) = VALUE(2)
         ENDIF
C
      ELSEIF (KEYWRD .EQ. 'ZMIX') THEN
         CALL CKXNUM (LINE, 2, LOUT, NVAL, VALUE, IERR)
         KERR = KERR.OR.IERR
         IF (NZMIX+1 .GT. NMAX) THEN
               WRITE (LOUT, *)
     1         ' ERROR... THE PROBLEM IS ONLY DIMENSIONED FOR ', NMAX,
     2         ' (X,Z) PAIRS'
               KERR = .TRUE.
         ELSE
            NZMIX = NZMIX + 1
            XXZ(NZMIX) = VALUE(1)
            ZM(NZMIX) = VALUE(2)
         ENDIF

         ELSEIF (KEYWRD .EQ. 'DMIX') THEN
         CALL CKXNUM (LINE, 2, LOUT, NVAL, VALUE, IERR)
         KERR = KERR.OR.IERR
         IF (NDMIX+1 .GT. NMAX) THEN
               WRITE (LOUT, *)
     1         ' ERROR... THE PROBLEM IS ONLY DIMENSIONED FOR ', NMAX,
     2         ' (X,D) PAIRS'
               KERR = .TRUE.
         ELSE
            NDMIX = NDMIX + 1
            XXD(NDMIX) = VALUE(1)
            DM(NDMIX) = VALUE(2)
         ENDIF
         
      ELSEIF (KEYWRD .EQ. 'ZST') THEN
          CALL CKXNUM (LINE, 1, LOUT, NVAL, VALUE, IERR)
          KERR = KERR.OR.IERR
          ZST=VALUE(1)
cC
cC          Start with droplet model temperature profile for initialization
cC
c      ELSEIF (KEYWRD .EQ. 'GLOB') THEN
c         LGLOB = .TRUE.
cC
cC
cC          FUEL Specifier 
cC          FORMAT 
cC          FUEL, Number of Carbon, Number of Hydrgen
cC          Ex ) FUEL 3 8
cC          
c      ELSEIF  (KEYWRD .EQ. 'FUEL') THEN
c           CALL CKXNUM (LINE, 2, LOUT, NVAL,VALUE, IERR)
c           KERR =KERR .OR. IERR
c           CARBON=VALUE(1)
c           HYDRO=VALUE(2)

cC         Parameters needed for droplet analysis calculation 
cC         FORMAT
cC         GKEY    HC    CP     K     PHI
cC          
c      ELSEIF  (KEYWRD .EQ. 'GKEY') THEN
c         CALL CKXNUM (LINE, 4, LOUT, NVAL,VALUE, IERR)
c           KERR =KERR .OR. IERR
c           HC=VALUE(1)
c           CP=VALUE(2)
c            RK=VALUE(3)
c            PHI = VALUE(4)
cC
cC          ON A RESTART USE GIVEN TEMPERATURE PROFILE, NOT THE ONE ON
cC               THE RESTART FILE
cC
c      ELSEIF (KEYWRD .EQ. 'USTG') THEN
c         LUSTGV = .TRUE.
cC
cC       TEMPERATURE WHICH IS TO BE HELD FIXED FOR A FREE FLAME
cC
c      ELSEIF (KEYWRD .EQ. 'TFIX') THEN
c         NEC(6)   = .TRUE.
c         CALL CKXNUM (LINE, 1, LOUT, NVAL, TFIXT, IERR)
c         KERR = KERR.OR.IERR
cC
cC--------------TRANSPORT OPTIONS KEYWORDS--------------------
cC
cC       MULTICOMPONENT FORMULAS USED
cC
c      ELSEIF (KEYWRD .EQ. 'MULT') THEN
c         LMULTI = .TRUE.
cC
cC       MIXTURE-AVERAGED FORMULAS USED
cC
c      ELSEIF (KEYWRD .EQ. 'MIX') THEN
c         LMULTI = .FALSE.
cC
cC       THERMAL DIFFUSION INCLUDED
cC
c      ELSEIF (KEYWRD .EQ. 'TDIF') THEN
c         LTDIF    = .TRUE.
cC
cC       USE CORRECTION VELOCITY FORMALISM
cC
c      ELSEIF (KEYWRD .EQ. 'VCOR') THEN
c         LVCOR = .TRUE.
cC
cC       USE "TRACE" APPROXIMATION , LUMP ALL TRANSPORT ERRORS
cC        INTO THE "LAST" SPECIES
cC
c      ELSEIF (KEYWRD .EQ. 'TRCE') THEN
c         LVCOR = .FALSE.
cC
c      ELSEIF (KEYWRD .EQ. 'DVCF') THEN
c         CALL CKXNUM (LINE, 1, LOUT, NVAL, DVCF, IERR)
c         KERR = KERR.OR.IERR
cC
cC--------------SENSITIVITY KEYWORDS--------------------
cC
cC        ALL REACTION SENSITIVITY
cC
c      ELSEIF (KEYWRD .EQ. 'ASEN') THEN
c         LASEN = .TRUE.
cC
cC        SENSITIVITY TO HEATS OF FORMATION
cC
c      ELSEIF (KEYWRD .EQ. 'HSEN') THEN
c         LHSEN = .TRUE.
cC
cC--------------PRINTING AND RESTARTING KEYWORDS--------------------
cC
cC          PRINT CONTROL
cC
c      ELSEIF (KEYWRD .EQ. 'PRNT') THEN
c         CALL CKXNUM (LINE, 1, LOUT, NVAL, VALUE, IERR)
c         KERR = KERR.OR.IERR
c         IPRNT    = INT(VALUE(1))
cC
cC          RESTART SKIPS
cC
c      ELSEIF (KEYWRD .EQ. 'SKIP') THEN
c         CALL CKXNUM (LINE, 1, LOUT, NVAL, VALUE, IERR)
c         KERR = KERR.OR.IERR
c         MFILE = INT(VALUE(1)) + 1
cC
cC          RESTART CHECK
cC
c      ELSEIF (KEYWRD .EQ. 'RSTR') THEN
c         LRSTRT = .TRUE.
cC
cC          POSTPROCESS CHECK         
cC         
c      ELSEIF (KEYWRD .EQ. 'POST') THEN
c         LPOST  = .TRUE.      
c         LRSTRT = .TRUE.
cC
cC          CONTINUATION FLAG
cC
c      ELSEIF (KEYWRD .EQ. 'CNTN') THEN
c         LCNTUE   = .TRUE.
C
C        LAST CARD
C
      ELSEIF (KEYWRD .EQ. 'END ') THEN
         GO TO 6000
cC
cC-------------THE KEYWORDS AFTER HERE ARE NOT OPERATIONAL------------
cC
cC         SPECIES SCALE FACTOR
cC
c      ELSEIF (KEYWRD .EQ. 'SCAL') THEN
c         CALL CKSNUM (LINE, 1, LOUT, KSYM, KK, KSPEC, NVAL,
c     1                VALUE, IERR)
c         IF (IERR) THEN
c            WRITE (LOUT,'(A)')
c     1      ' ERROR READING DATA FOR KEYWORD '//KEYWRD
c            KERR = .TRUE.
c         ENDIF
c         SCAL(NYS+KSPEC) = VALUE(1)
c         WRITE (LOUT,*)
c     1                ' WARNING...SPECIES SCALING IS NOT IMPLEMENTED.'
cC
cC         SCALE TEMPERATURE
cC
c      ELSEIF (KEYWRD .EQ. 'SCLT') THEN
c         CALL CKXNUM (LINE, 1, LOUT, NVAL, SCAL(NT), IERR)
c         KERR = KERR.OR.IERR
c         WRITE (LOUT,*) ' WARNING...TEMP SCALING IS NOT IMPLEMENTED.'
cC
cC        MASS FLUX FRACTION SENSITIVITY
cC
c      ELSEIF (KEYWRD .EQ. 'ESEN') THEN
c         LESEN      = .TRUE.
c         WRITE (LOUT,*)
c     1              ' WARNING...FLUX SENSITIVITY IS NOT IMPLEMENTED.'
cC
cC        MASS FLOW RATE SENSITIVITY
cC
c      ELSEIF (KEYWRD .EQ. 'MSEN') THEN
c         LMSEN      = .TRUE.
c         WRITE (LOUT,*)
c     1             ' WARNING...FLOW SENSITIVITY IS NOT IMPLEMENTED.'
cC
cC       PRESSURE SENSITVITY
cC
c      ELSEIF (KEYWRD .EQ. 'PSEN') THEN
c         LPSEN      = .TRUE.
c         WRITE (LOUT,*)
c     1               ' WARNING...PRES SENSITIVITY IS NOT IMPLEMENTED.'
cC
cC       CONDUCTIVITY SENSITIVITY
cC
c      ELSEIF (KEYWRD .EQ. 'CSEN') THEN
c         LCSEN      = .TRUE.
c         WRITE (LOUT,*)
c     1            ' WARNING...COND SENSITIVITY IS NOT IMPLEMENTED.'
cC
cC        DIFFUSION COEFFICIENT SENSITIVITY
cC
c      ELSEIF (KEYWRD .EQ. 'DSEN') THEN
c         LDSEN      = .TRUE.
c         WRITE (LOUT,*)
c     1            ' WARNING...DIFFUS SENSITIVITY IS NOT IMPLEMENTED.'
C
C       TOTAL NUMBER OF POINTS ALLOWED FOR THIS RUN
C
      ELSEIF (KEYWRD .EQ. 'NTOT') THEN
         CALL CKXNUM (LINE, 1, LOUT, NVAL, VALUE, IERR)
         KERR = KERR.OR.IERR
         NTOT = INT(VALUE(1))
cC
cC       TOTAL NUMBER OF ADAPTIVE POINTS THAT CAN BE ADDED PER ADAPTION
cC
c      ELSEIF (KEYWRD .EQ. 'NADP') THEN
c         CALL CKXNUM (LINE, 1, LOUT, NVAL, VALUE, IERR)
c         KERR = KERR.OR.IERR
c         NADP = INT(VALUE(1))
cC
c      ELSEIF (KEYWRD .EQ. 'NOFT') THEN
cC
cC        DO NOT DO THE FIXED TEMPERATURE PROBLEM
cC
c         N1CALL = 2
cC
c      ELSEIF (KEYWRD .EQ. 'SPOS') THEN
cC
cC        CONVERT NEGATIVE SPECIES SOLUTIONS
cC
c         CALL CKXNUM (LINE, 1, LOUT, NVAL, SPOS, IERR)
c         KERR = KERR.OR.IERR
cC
c      ELSEIF (KEYWRD .EQ. 'GFAC') THEN
cC
cC        FACTOR FOR GAS-PHASE RATE CONSTANTS
cC
c         CALL CKXNUM (LINE, 1, LOUT, NVAL, GFAC, IERR)
c         KERR = KERR.OR.IERR
C
C
C        DEVELOPMENT EFFORT FOR NEW SPHDIFF 
C        DEVELOPING homogeneous reactor case
C        Activate homogeneous reactor
      ELSEIF (KEYWRD .EQ. 'LHOM') THEN
     
      LHOM = .TRUE.     
      
      ELSEIF (KEYWRD .EQ. 'ZCAL' ) THEN
      
      LZMIX = .TRUE.
      
      ELSE
C
C--------------END OF KEYWORDS--------------------
C
C        TO GET HERE, AN INVALID KEYWORD WAS READ
C
         WRITE (LOUT,*) ' ERROR...ILLEGAL KEYWORD'
         KERR = .TRUE.
      ENDIF
      GO TO 90
cC
cC         CHECK THE REACTANT AND PRODUCT SUMS
cC
6000  CONTINUE
C
      SUMR       = 0.
c      SUMP       = 0.
      DO 6100 K = 1, KK
         SUMR = SUMR + REAC(K)
c         SUMP = SUMP + PROD(K)
6100  CONTINUE
C
C         NORMALIZE REACTANT AND PRODUCT FRACTIONS
C
      DO 6200 K = 1, KK
         REAC(K) = REAC(K)/SUMR
c         PROD(K) = PROD(K)/SUMP
6200  CONTINUE
C
      IF (ABS(SUMR-1.0) .GT. 1.E-6) WRITE (LOUT, *)
     1                ' CAUTION...REACTANT FRACTIONS SUM TO ', SUMR
c      IF ((.NOT.CNTNUD) .AND.  ABS(SUMP-1.0).GT.1.E-6)
c     1    WRITE (LOUT, *)
c     2                ' CAUTION...PRODUCT FRACTIONS SUM TO ',  SUMP
cC
cC          CHECK FOR NECESSARY INPUT
cC
c      IF (.NOT. NEC(8) )THEN
c         WRITE (LOUT, *) ' ERROR..."BURN" OR "FREE" NOT SPECIFIED'
c         KERR = .TRUE.
c      ENDIF
C
c      IF (.NOT. NEC(1) ) THEN
c         WRITE (LOUT, *)
c     1              ' ERROR...MUST SPECIFY EITHER "MOLE" OR "MASS" '
c         KERR = .TRUE.
c      ENDIF
C
c      IF (.NOT. LBURNR) LENRGY = .TRUE.
cC
c      IF ((.NOT. NEC(2)) .AND. (LBURNR)) THEN
c           WRITE (LOUT, *)
c     1 ' ERROR..."ENRG" OR "TGIV" MUST BE PROVIDED FOR A BURNER FLAME'
c         KERR = .TRUE.
c      ENDIF
cC
c      IF (.NOT. NEC(3) ) THEN
c         WRITE (LOUT, *) ' ERROR...PRESSURE NOT GIVEN'
c         KERR = .TRUE.
c      ENDIF
cC
c      IF (.NOT. NEC(4)) THEN
c         WRITE (LOUT, *) ' ERROR...MASS FLOW RATE NOT SPECIFIED'
c         KERR = .TRUE.
c      ENDIF
cC
c      IF (.NOT. NEC(5)) THEN
c         WRITE (LOUT, *) ' ERROR..."XEND" NOT SPECIFIED'
c         KERR = .TRUE.
c      ENDIF
cC
c      IF ((.NOT. NEC(6)) .AND. (.NOT.LBURNR)) THEN
c            WRITE (LOUT, *)
c     1                 ' ERROR..."TFIX" NOT GIVEN FOR A FREE FLAME'
c           KERR = .TRUE.
c      ENDIF
cC
cC           MAKE SURE THE (X,T) PAIRS ARE IN ORDER
cC
c      DO 5500 N = 2, NTEMP
c         IF (XX(N-1) .GE. XX(N)) THEN
c            WRITE (LOUT, *)
c     1              ' ERROR...SPECIFIED TEMPERATURES ARE OUT OF ORDER'
c            KERR = .TRUE.
c         ENDIF
c5500  CONTINUE
cC
cC           MAKE SURE THE INITIAL GRID POINTS ARE IN ORDER
cC
c      IF ((.NOT.CNTNUD) .AND. (.NOT.LUMESH)) THEN
c         NPTS = NP
c         DO 5550 N = 2, NPTS
c            IF (X(N-1) .GE. X(N)) THEN
c              WRITE (LOUT, *)
c     1                 ' ERROR...INITIAL GRID IS OUT OF ORDER'
c              KERR = .TRUE.
c            ENDIF
c5550     CONTINUE
c      ENDIF
cC
cC         MAKE SURE THE GIVEN TEMPERATURES SPAN THE XEND-XSTR DOMAIN
cC
c      IF (.NOT.LRSTRT .OR. .NOT.CNTNUD .OR. LUSTGV) THEN
c         IF(XX(1).GT.XSTR .OR. XX(NTEMP).LT.XEND) THEN
c            WRITE (LOUT,*)
c     1      ' ERROR...GIVEN TEMPERATURE PROFILE DOES NOT SPAN XEND-XSTR'
c            KERR = .TRUE.
c         ENDIF
c      ENDIF
cC
cC         SET OPTIONAL INPUT IF NEEDED
cC
c      IF (.NOT. NOPT(1)) WMIX = (XEND-XSTR)*0.50
c      IF (.NOT. NOPT(2)) XCEN = (XEND-XSTR)*0.35
cC
      IF (KERR) STOP
C
C         formats
C
      RETURN
7000  FORMAT (A4, A)
8000  FORMAT (10X, A4, A76)
      END

